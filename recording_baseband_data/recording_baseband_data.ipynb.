{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e86ed7af-b1e5-4bad-989b-01961b9b223d",
   "metadata": {},
   "source": [
    "## Maxwell A. Fine 2024-07-22\n",
    "\n",
    "### This notebook is for:\n",
    "* Learning how to record baseband data with `vrt_to_sigmf`\n",
    "* Slicing to only keep baseband data for 1 second by a \"good\" `.h5` candidate\n",
    "* Slicing to only keep baseband data for 1 second in the other band for DM dependent arrival time\n",
    "* starting to integreate into the pipeline\n",
    "\n",
    "\n",
    "### Notes:\n",
    "* 1 second might end up being too much data to keep\n",
    "* Maybe calculate width of arrivial times for the band based on DM and keep 2-3x that amount\n",
    "* We will write the baseband data to a 1 tb ram disk `/data_tmp`\n",
    "* No easy way to record at **EXACTLY** the same time as the `.fil` data  \n",
    "\n",
    "\n",
    "### '--help' option\n",
    "```\n",
    "(venv) frb@uranus:/home_local/frb/git/vrt-iq-tools$ vrt_to_sigmf --help\n",
    "VRT samples to file. Allowed options:\n",
    "  --help                     help message\n",
    "  --file arg (=vrt_samples)  name of the file to write binary samples to\n",
    "  --auto-file arg            prefix of the auto generated filename to write \n",
    "                             binary samples to\n",
    "  --nsamps arg (=0)          total number of samples to receive\n",
    "  --duration arg (=0)        total number of seconds to receive\n",
    "  --progress                 periodically display short-term bandwidth\n",
    "  --channel arg (=0)         which channel(s) to use (specify \"0\", \"1\", \"0,1\", \n",
    "                             etc)\n",
    "  --author arg               core:author in sigmf-meta\n",
    "  --description arg          core:description in sigmf-meta\n",
    "  --int-second               align start of reception to integer second\n",
    "  --null                     run without writing to file\n",
    "  --continue                 don't abort on a bad packet\n",
    "  --meta-only                only create sigmf-meta file\n",
    "  --dt-trace                 add DT trace data\n",
    "  --vrt                      write VRT stream to file\n",
    "  --address arg (=localhost) VRT ZMQ address\n",
    "  --zmq-split                create a ZeroMQ stream per VRT channel, increasing\n",
    "                             port number for additional streams\n",
    "  --instance arg (=0)        VRT ZMQ instance\n",
    "  --port arg                 VRT ZMQ port\n",
    "  --hwm arg (=10000)         VRT ZMQ HWM\n",
    "\n",
    "\n",
    "This application streams data from a VRT stream to a file.\n",
    "```\n",
    "\n",
    "\n",
    "### Trying this out in the terminal `vrt_to_sigmf --file max_test_file --dt-trace --instance 2 `:\n",
    "* `--file` controls data file & json file name\n",
    "* not sure what the `dt-trace` is or does, but we need it\n",
    "* `--instance` controls what band we are looking at, L1 and L2 use different ones but PH, and PV use the same? - look into\n",
    "\n",
    "\n",
    "### Open Questions:\n",
    "* Is Time of the candiate the non-DM corrected time at the highest freq in the band?  \n",
    "\n",
    "\n",
    "### Steps:\n",
    "* [x] try saving baseband file via CLI\n",
    "* [x] subprocess call to save baseband\n",
    "* [x] slice baseband segment and update meta data, write to new file\n",
    "* [ ] Have function to to adjust time of arrival for DM\n",
    "* [ ] look into what time is listed for a time candidate: top, bottom, center of band? corrected for DM?\n",
    "* [ ] write something to slice the corresponding region of L or P bands for a candidate\n",
    "* [ ] delete original baseband data after a loop\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fa28c774-bcbe-4395-82ef-da2947d2aee2",
   "metadata": {},
   "source": [
    "### Lets make a subprocess function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "id": "e0a14492-4aa1-43e3-aab8-e13ad4ab7d02",
   "metadata": {},
   "outputs": [],
   "source": [
    "import subprocess\n",
    "import os\n",
    "\n",
    "def run_vrt_to_sigmf(file_name, instance, duration, ram_data_dir='/data_tmp', address=None):\n",
    "    # Define the output file path\n",
    "    output_file_path = os.path.join(ram_data_dir, file_name)\n",
    "    print(output_file_path)\n",
    "\n",
    "    # Define the base command and arguments\n",
    "    command = [\n",
    "        \"vrt_to_sigmf\",\n",
    "        \"--file\", output_file_path,\n",
    "        \"--dt-trace\", # removed for testing, but needs to be uncommented when recording with the telescope\n",
    "        \"--instance\", str(instance),\n",
    "        \"--duration\", str(duration),\n",
    "        \"--progress\",\n",
    "    ]\n",
    "\n",
    "    # Add --address to the command if provided\n",
    "    if address:\n",
    "        command.extend([\"--address\", address])\n",
    "\n",
    "    # Print the command for debugging or execution\n",
    "    print(\"Command to be executed:\", \" \".join(command))\n",
    "    \n",
    "    try:\n",
    "        # Start the process\n",
    "        process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n",
    "        \n",
    "        # Print stdout and stderr as the process runs\n",
    "        for stdout_line in iter(process.stdout.readline, ''):\n",
    "            if stdout_line:\n",
    "                print(f\"Output: {stdout_line.strip()}\")\n",
    "        for stderr_line in iter(process.stderr.readline, ''):\n",
    "            if stderr_line:\n",
    "                print(f\"Error: {stderr_line.strip()}\")\n",
    "        \n",
    "        # Ensure all output has been processed\n",
    "        process.stdout.close()\n",
    "        process.stderr.close()\n",
    "        \n",
    "        # Wait for the process to finish and get the return code\n",
    "        return_code = process.wait()\n",
    "        \n",
    "        print(f\"Return Code: {return_code}\")\n",
    "        \n",
    "    except subprocess.CalledProcessError as e:\n",
    "        print(f\"An error occurred: {e}\")\n",
    "        return e.returncode"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "763d9320-6da2-45fa-a3b9-c2d7c4296379",
   "metadata": {},
   "source": [
    "### Example use"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "id": "40613d12-6567-4699-83f7-5b0149b259bb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/data_tmp/L1_Band_max_test_filev3\n",
      "Command to be executed: vrt_to_sigmf --file /data_tmp/L1_Band_max_test_filev3 --dt-trace --instance 2 --duration 8 --progress\n",
      "Output: Press Ctrl + C to stop receiving...\n",
      "Output: # First frame: 10000 samples, 1722295874 full secs, 0.351800000 frac secs (counter 14)\n",
      "Output: # VRT Context:\n",
      "Output: #    Stream ID (channel): 1 (0)\n",
      "Output: #    Sample Rate [samples per second]: 100000000\n",
      "Output: #    RF Freq [Hz]: 1250000000\n",
      "Output: #    Bandwidth [Hz]: 80000000\n",
      "Output: #    Gain [dB]: 70\n",
      "Output: #    Ref lock: external\n",
      "Output: #    Time cal: pps\n",
      "Output: #    Cal time: 1722294456\n",
      "Output: 100.023 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.003 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9998 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9914 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.005 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.001 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.9988 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Return Code: 0\n"
     ]
    }
   ],
   "source": [
    "# example use\n",
    "file_name = \"L1_Band_max_test_filev3\"\n",
    "ram_data_dir = '/data_tmp'\n",
    "instance = 2\n",
    "duration = 8\n",
    "run_vrt_to_sigmf(file_name, instance, duration)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b89edc9-c929-4b6f-8906-71687578bed5",
   "metadata": {},
   "source": [
    "### lets try reading the data, and json meta file in "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "9c8f3354-efe3-4b33-8c02-174908c5f2bc",
   "metadata": {},
   "outputs": [],
   "source": [
    "import sigmf\n",
    "import numpy as np\n",
    "file_path = os.path.join(ram_data_dir, file_name)\n",
    "\n",
    "handle = sigmf.sigmffile.fromfile(file_path) # this is the json stuff\n",
    "iq = handle.read_samples(); # this is the data, numpy array, complex 64 float shape (n samples,)\n",
    "sample_rate = int(handle.get_global_info()[handle.SAMPLE_RATE_KEY])\n",
    "center_freq = handle.get_capture_info(0)[\"core:frequency\"]\n",
    "start_time = handle.get_capture_info(0)[\"core:datetime\"]\n",
    "#version = handle.get\"core:version\": \"0.0.1\"  # Add the core:version property\n",
    "version = handle.get_global_info()[handle.VERSION_KEY] #\"core:version\": \"1.0.0\","
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "4192c794-3f1b-4621-a003-4e916fca9417",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dtype('complex64')"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iq.dtype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "81a048ba-9667-4d3d-a43e-010e48f5ca49",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'1.0.0'"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "version"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "0573f651-8725-4c9f-abf5-0dfaff79e4c0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2024-07-29T11:31:46.009200 \n",
      " {\n",
      "    \"global\": {\n",
      "        \"core:datatype\": \"ci16_le\",\n",
      "        \"core:recorder\": \"vrt_to_sigmf\",\n",
      "        \"core:sample_rate\": 100000000,\n",
      "        \"core:sha512\": \"ddc84ee389e70e9705ece2cde89a0a650fb417a92bb92521b1349d4a9c7a1f16a1fb3875d24df1fea4e190b8e8a10598a8ea2665b3958e0b7dfd43da3f78f484\",\n",
      "        \"core:version\": \"1.0.0\",\n",
      "        \"dt:datetime\": \"2024-07-29T11:31:46.000000\",\n",
      "        \"dt:focusbox_position_mm\": 451,\n",
      "        \"dt:pointing:active_tracker\": \"j2000tracker\",\n",
      "        \"dt:pointing:az_speed_deg_s\": -0.004261,\n",
      "        \"dt:pointing:current:az_deg\": 63.58,\n",
      "        \"dt:pointing:current:dec_deg\": 22.015,\n",
      "        \"dt:pointing:current:el_deg\": 44.983,\n",
      "        \"dt:pointing:current:ra_h\": 5.576,\n",
      "        \"dt:pointing:dt_model\": \"true\",\n",
      "        \"dt:pointing:dt_model_j2000\": \"true\",\n",
      "        \"dt:pointing:el_speed_deg_s\": -0.001354,\n",
      "        \"dt:pointing:error:az_deg\": 0.0,\n",
      "        \"dt:pointing:error:el_deg\": -0.0,\n",
      "        \"dt:pointing:model:a0\": 0.0,\n",
      "        \"dt:pointing:model:aa\": 0.0,\n",
      "        \"dt:pointing:model:b\": 0.0,\n",
      "        \"dt:pointing:model:c1\": 0.0,\n",
      "        \"dt:pointing:model:c2\": 0.0,\n",
      "        \"dt:pointing:model:e0\": -0.18,\n",
      "        \"dt:pointing:model:za\": 0.0,\n",
      "        \"dt:pointing:offset:az_deg\": 0.0,\n",
      "        \"dt:pointing:offset:el_deg\": 0.0,\n",
      "        \"dt:pointing:refraction\": \"true\",\n",
      "        \"dt:pointing:refraction_j2000\": \"true\",\n",
      "        \"dt:pointing:setpoint:dec_deg\": 22.015,\n",
      "        \"dt:pointing:setpoint:ra_h\": 5.576,\n",
      "        \"dt:pointing:tracking_enabled\": \"true\",\n",
      "        \"vrt:bandwidth\": 80000000,\n",
      "        \"vrt:cal_time\": 1722252356,\n",
      "        \"vrt:channel\": 0,\n",
      "        \"vrt:reference\": \"external\",\n",
      "        \"vrt:rx_gain\": 70,\n",
      "        \"vrt:stream_id\": 1,\n",
      "        \"vrt:time_source\": \"pps\"\n",
      "    },\n",
      "    \"captures\": [\n",
      "        {\n",
      "            \"core:datetime\": \"2024-07-29T11:31:46.009200\",\n",
      "            \"core:frequency\": 1250000000,\n",
      "            \"core:sample_start\": 0\n",
      "        }\n",
      "    ],\n",
      "    \"annotations\": []\n",
      "}\n"
     ]
    }
   ],
   "source": [
    "print(start_time, '\\n', handle)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "598e87db-c541-42fe-8ca8-472d63cbb2a7",
   "metadata": {},
   "source": [
    "### Lets try cutting out and saving a slice"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "id": "4d1d188b-dce2-4f64-9976-837c0e98fbc5",
   "metadata": {},
   "outputs": [],
   "source": [
    "from datetime import datetime, timedelta\n",
    "import sigmf\n",
    "import numpy as np\n",
    "import os\n",
    "\n",
    "import os\n",
    "import sigmf\n",
    "\n",
    "'''\n",
    "def mjd_to_datetime(mjd):\n",
    "    \"\"\"\n",
    "    Convert Modified Julian Date (MJD) to a datetime object.\n",
    "    \n",
    "    Parameters:\n",
    "    mjd (float): Modified Julian Date.\n",
    "    \n",
    "    Returns:\n",
    "    datetime: Corresponding datetime object.\n",
    "    \"\"\"\n",
    "    jd = mjd + 2400000.5\n",
    "    return datetime(1858, 11, 17) + timedelta(days=jd)\n",
    "'''\n",
    "\n",
    "def mjd_to_datetime(mjd):\n",
    "    \"\"\"Convert MJD to datetime.\"\"\"\n",
    "    # MJD to Julian Date conversion\n",
    "    jd = mjd + 2400000.5\n",
    "    # Julian Date to datetime conversion\n",
    "    jd_utc = datetime(1858, 11, 17) + timedelta(days=jd - 0.5)\n",
    "    # Subtracts 0.5 from jd before converting it to a datetime object. \n",
    "    # This is because Julian Date conventionally starts at 12:00 UT (noon) on the Julian day,\n",
    "    # while datetime assumes the start of the day is at 00:00 (midnight). Thus, subtracting 0.5 aligns \n",
    "    # the start of the Julian Date day with the datetime day.\n",
    "    return jd_utc\n",
    "\n",
    "def read_baseband_data(ram_data_dir, orig_file_name, return_data=False):\n",
    "    \"\"\"\n",
    "    Read the metadata from a baseband file and optionally return the data.\n",
    "\n",
    "    Parameters:\n",
    "    ram_data_dir (str): Directory containing the baseband file.\n",
    "    orig_file_name (str): Name of the baseband file.\n",
    "    return_data (bool): Whether to return the IQ data as well. Defaults to False.\n",
    "\n",
    "    Returns:\n",
    "    tuple: A tuple containing:\n",
    "        - sample_rate (int): Sample rate in Hz.\n",
    "        - center_freq (float): Center frequency in Hz.\n",
    "        - start_time (str): Start time in ISO format.\n",
    "        - version (str): Version of the SigMF file.\n",
    "        - iq (np.ndarray): IQ data as a numpy array, complex 64 float shape (n samples,) if return_data is True.\n",
    "    \"\"\"\n",
    "    file_path = os.path.join(ram_data_dir, orig_file_name)\n",
    "    \n",
    "    # Read the SigMF file\n",
    "    handle = sigmf.sigmffile.fromfile(file_path)\n",
    "    sample_rate = int(handle.get_global_info()[handle.SAMPLE_RATE_KEY])\n",
    "    center_freq = handle.get_capture_info(0)[\"core:frequency\"]\n",
    "    start_time = handle.get_capture_info(0)[\"core:datetime\"]\n",
    "    print(start_time)\n",
    "    version = handle.get_global_info()[handle.VERSION_KEY]  # \"core:version\": \"1.0.0\"\n",
    "\n",
    "    if return_data:\n",
    "        iq = handle.read_samples()  # Read the data, numpy array, complex 64 float shape (n samples,)\n",
    "        return sample_rate, center_freq, start_time, version, iq\n",
    "\n",
    "    return sample_rate, center_freq, start_time, version\n",
    "\n",
    "\n",
    "\n",
    "def slice_and_save_baseband_data(ram_data_dir, orig_file_name, \n",
    "                              out_data_dir, new_file_name, time_candidate, delta_t=1):\n",
    "    \"\"\"\n",
    "    Slices a portion of IQ data from a SigMF file and saves the new sliced data along with updated metadata to new files.\n",
    "\n",
    "    Parameters:\n",
    "    ram_data_dir (str): Directory where the original SigMF file is stored.\n",
    "    orig_file_name (str): Name of the original SigMF file to process.\n",
    "    out_data_dir (str): Directory where the new sliced SigMF files will be saved.\n",
    "    new_file_name (str): Base name for the new SigMF files to be saved.\n",
    "    time_candidate (float): center time in mjd for the candidate\n",
    "    delta_t (float): Duration of the slice in seconds. Default is 1.\n",
    "\n",
    "    Returns:\n",
    "    None\n",
    "\n",
    "    The function reads the SigMF file, slices the IQ data between start_s and start_s + delta_t seconds, updates the start time,\n",
    "    and saves the new sliced data and metadata to new files in the specified output directory.\n",
    "\n",
    "    Example:\n",
    "    slice_and_save_sigmf_data('/path/to/orig_dir', 'example.sigmf-meta', '/path/to/out_dir', 'new_example', start_s=2, delta_t=1)\n",
    "    \"\"\"\n",
    "\n",
    "    # Call the read_baseband_data function\n",
    "    sample_rate, center_freq, start_time, version, iq = read_baseband_data(ram_data_dir, \n",
    "                                                                           orig_file_name, return_data=True)\n",
    "\n",
    "    # Convert time_candidate from MJD to datetime\n",
    "    time_candidate_dt = mjd_to_datetime(time_candidate)\n",
    "    start_time_dt = datetime.fromisoformat(start_time)\n",
    "\n",
    "    # Calculate start_s as the difference in seconds between time_candidate and start_time\n",
    "    start_s = (time_candidate_dt - start_time_dt).total_seconds()\n",
    "\n",
    "    # Safeguard check\n",
    "    if start_s < delta_t:\n",
    "        raise ValueError(f\"Invalid start_s value: {start_s} of the candidate. It must be greater than or equal to delta_t: {delta_t}\")\n",
    "\n",
    "    # indexs in data\n",
    "    start = int(start_s * sample_rate)\n",
    "    stop = int((start_s + delta_t) * sample_rate)\n",
    "\n",
    "    print('start_s', start_s)\n",
    "    print('start', start)\n",
    "    print('stop', stop)\n",
    "\n",
    "    # slice data\n",
    "    data_slice = iq[start:stop]\n",
    "    # update start time for the slice\n",
    "    new_start_time = datetime.fromisoformat(start_time) + timedelta(seconds=start_s)\n",
    "    new_start_time_str = new_start_time.isoformat()\n",
    "\n",
    "    # Create a new SigMF file\n",
    "    new_handle = sigmf.sigmffile.SigMFFile()\n",
    "\n",
    "    # Update the metadata\n",
    "    new_handle.set_global_info({\n",
    "        \"core:sample_rate\": sample_rate,\n",
    "        \"core:datatype\": handle.get_global_info()[\"core:datatype\"],\n",
    "        \"core:version\": version  # Add the core:version property\n",
    "    })\n",
    "\n",
    "    # Set the capture information directly\n",
    "    new_handle.captures = [{\n",
    "        \"core:frequency\": center_freq,\n",
    "        \"core:datetime\": new_start_time_str\n",
    "    }]\n",
    "\n",
    "    # Set the annotation information\n",
    "    new_handle.annotations = [{\n",
    "        \"core:sample_count\": len(data_slice)\n",
    "    }]\n",
    "\n",
    "    # Define the new file paths\n",
    "    new_meta_file_path = os.path.join(out_data_dir, f\"{new_file_name}.sigmf-meta\")\n",
    "    new_data_file_path = os.path.join(out_data_dir, f\"{new_file_name}.sigmf-data\")\n",
    "\n",
    "    # Save the new SigMF metadata file\n",
    "    new_handle.tofile(new_meta_file_path)\n",
    "\n",
    "    # Save the new IQ data to a binary file\n",
    "    data_slice.tofile(new_data_file_path)\n",
    "\n",
    "    print(f\"New files saved to: {new_meta_file_path} and {new_data_file_path}\")\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "id": "5b4665a3-a84b-4652-ba7e-f311f9ef777a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2024-07-29T13:27:38.939500\n",
      "start_s 2.0\n",
      "start 200000000\n",
      "stop 300000000\n",
      "New files saved to: /data_tmp/sliced_example.sigmf-meta and /data_tmp/sliced_example.sigmf-data\n"
     ]
    }
   ],
   "source": [
    "# Directories and file names\n",
    "ram_data_dir = '/data_tmp'  # Directory containing the original baseband SigMF files\n",
    "orig_file_name = 'L1_Band_max_test_filev3'    # Original SigMF metadata file name\n",
    "out_data_dir = '/data_tmp'    # Directory where the new sliced files will be saved\n",
    "new_file_name = 'sliced_example'         # Base name for the new SigMF files\n",
    "\n",
    "# Parameters for slicing\n",
    "start_s = 2.0  # Start time in seconds from the beginning of the observation\n",
    "delta_t = 1.0  # Duration of the slice in seconds\n",
    "\n",
    "# Call the function to slice and save the baseband data\n",
    "slice_and_save_baseband_data(ram_data_dir, orig_file_name, out_data_dir, new_file_name, start_s, delta_t)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "05daac40-01d5-4313-9e84-c95088f9d1ed",
   "metadata": {},
   "source": [
    "### Now lets write some functions to account for DM arrivial time delay\n",
    "\n",
    "This is based on `candidate_maker.py` (Tammo Jan Dijkema) which is itself based on `Candidate.ipynb` from `your` documentation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "f3293190-8ef1-4483-a7c9-0793bf204319",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of samples: 400000000\n"
     ]
    }
   ],
   "source": [
    "### function to determine file size (aka duration) Fast\n",
    "\n",
    "import os\n",
    "import numpy as np\n",
    "\n",
    "def get_number_of_samples_from_sigmf(filepath, sample_dtype=np.complex64, file_extension='.sigmf-data'):\n",
    "    \"\"\"\n",
    "    Calculate the number of samples in a SigMF binary data file.\n",
    "\n",
    "    This function reads the size of the binary data file associated with the given\n",
    "    SigMF filepath and calculates the number of samples based on the specified\n",
    "    sample data type.\n",
    "\n",
    "    Parameters:\n",
    "    ----------\n",
    "    filepath : str\n",
    "        The base filepath (without the extension) of the SigMF file. The function\n",
    "        expects the binary data file to have a '.sigmf-data' extension.\n",
    "    sample_dtype : numpy.dtype, optional\n",
    "        The data type of the samples in the binary file. Default is np.complex64.\n",
    "    file_extension : str, optional \n",
    "        File extension to add, default is '.sigmf-data'\n",
    "\n",
    "    Returns:\n",
    "    -------\n",
    "    int\n",
    "        The number of samples in the binary data file.\n",
    "    \"\"\"\n",
    "    base, ext = os.path.splitext(filepath)\n",
    "    data_file = base + file_extension\n",
    "    file_size = os.path.getsize(data_file)\n",
    "    sample_size = np.dtype(sample_dtype).itemsize\n",
    "    num_samples = file_size // sample_size\n",
    "    return num_samples\n",
    "\n",
    "\n",
    "num_samples = get_number_of_samples_from_sigmf(data_file)\n",
    "print(f\"Number of samples: {num_samples}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "3b8cb1e6-f210-450a-b4ba-b799827df683",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Inital functions copied from `candidate_maker.py`\n",
    "\n",
    "def time_from_dm(f_mhz, dm):\n",
    "    \"\"\"\n",
    "    Calculate the dispersion (DM) delay time in seconds for a given frequency and dispersion measure (DM).\n",
    "\n",
    "    DM constant is 4149 for freq units in mhz , and dm in pc/cm^3\n",
    "\n",
    "    Parameters:\n",
    "    f_mhz (float): Frequency in megahertz (MHz).\n",
    "    dm (float): Dispersion measure in pc cm^-3.\n",
    "\n",
    "    Returns:\n",
    "    float: Time delay in seconds for a given freq and DM.\n",
    "    \"\"\"\n",
    "    return 4149 * dm / f_mhz**2\n",
    "\n",
    "\n",
    "def get_mjd(mjd1, freq1_mhz, freq2_mhz, dm):\n",
    "    \"\"\"\n",
    "    Calculate the Modified Julian Date (MJD) at a second frequency, given a detection at a first frequency.\n",
    "\n",
    "    Parameters:\n",
    "    mjd1 (float): MJD of the detection at the first frequency.\n",
    "    freq1_mhz (float): First frequency in megahertz (MHz) at which the detection was made.\n",
    "    freq2_mhz (float): Second frequency in megahertz (MHz) at which to calculate the MJD.\n",
    "    dm (float): Dispersion measure in pc cm^-3.\n",
    "\n",
    "    Returns:\n",
    "    float: MJD at the second frequency.\n",
    "    \"\"\"\n",
    "    offset1_s = time_from_dm(freq1_mhz, dm)\n",
    "    offset2_s = time_from_dm(freq2_mhz, dm)\n",
    "    print(\"Correction in seconds:\", (offset2_s - offset1_s))\n",
    "    return mjd1 + (offset2_s - offset1_s) / (24 * 3600)\n",
    "\n",
    "\n",
    "def compute_time_offset(sigmf_file1, sigmf_file2, dm, time_candidate):\n",
    "    \"\"\"\n",
    "    Compute the time offset in seconds from the start of the baseband data for a given MJD and frequency.\n",
    "\n",
    "    Parameters:\n",
    "    sigmf_file1 (str): Path to the first SigMF file.\n",
    "    sigmf_file2 (str): Path to the second SigMF file.\n",
    "    dm (float): Expected Dispersion measure in pc cm^-3.\n",
    "    time_candidate (float): Candidate detection time in mjd for file1.\n",
    "\n",
    "    Returns:\n",
    "    arrivial time in mjd for sigmf_file2\n",
    "    time_offset in seconds\n",
    "    \n",
    "    Raises:\n",
    "    RuntimeError: If the computed time offset is before the start or after the end of the baseband data.\n",
    "    \"\"\"\n",
    "\n",
    "    # Extract directory and file name from sigmf_file1\n",
    "    baseband_dir1, baseband_file_name1 = os.path.split(sigmf_file1)\n",
    "    \n",
    "    # Read metadata from the first SigMF file\n",
    "    sample_rate1, center_freq1, start_time1, version1 = read_baseband_data(baseband_dir1, baseband_file_name1)\n",
    "\n",
    "\n",
    "    # Convert start time to MJD\n",
    "   # start_time_dt1 = datetime.fromisoformat(start_time1)\n",
    "    #mjd_start1 = start_time_dt1.toordinal() + 1721424.5\n",
    "\n",
    "    # Calculate MJD of the candidate event\n",
    "    mjd_candidate = time_candidate\n",
    "\n",
    "    # Extract directory and file name from sigmf_file2\n",
    "    baseband_dir2, baseband_file_name2 = os.path.split(sigmf_file2)\n",
    "\n",
    "    # Read metadata from the second SigMF file\n",
    "    sample_rate2, center_freq2, start_time2, version2 = read_baseband_data(baseband_dir2, baseband_file_name2)\n",
    "\n",
    "    # Compute the corrected MJD\n",
    "    # this is arrival time in the new frequency band\n",
    "    mjd_corrected = get_mjd(mjd_candidate, center_freq1 / 1e6, center_freq2 / 1e6, dm)\n",
    "\n",
    "    # Read in start time for file2\n",
    "    start_time_dt2 = datetime.fromisoformat(start_time2)\n",
    "    mjd_start2 = start_time_dt2.toordinal() + 1721424.5\n",
    "    \n",
    "    # Compute the time offset in seconds from the start of the second SigMF file\n",
    "    time_offset = (mjd_corrected - mjd_start2) * 24 * 3600\n",
    "\n",
    "    print(f\"Computed time = {time_offset} seconds since start\")\n",
    "\n",
    "    # Calculate the number of samples in the second SigMF file\n",
    "    n_samples2 = get_number_of_samples_from_sigmf(sigmf_file2, sample_dtype=np.complex64, file_extension='.sigmf-data')\n",
    "\n",
    "    # Calculate the duration of the data in the second SigMF file\n",
    "    duration = n_samples2 / sample_rate2\n",
    "\n",
    "    if time_offset < 0:\n",
    "        raise RuntimeError(\"Computed time is before the start of the baseband data.\")\n",
    "    elif time_offset > duration:\n",
    "        raise RuntimeError(\"Computed time is after the end of the baseband data.\")\n",
    "    \n",
    "    return mjd_start2, time_offset\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "caf77d5b-b118-4293-86df-6b75e8d7dfea",
   "metadata": {},
   "source": [
    "### Alright, now we write a few wrappers.\n",
    "\n",
    "* write a function to get the time_candidate in mjd, using the `.fil` header corresponding to a good candidate \n",
    "\n",
    "* We want a loop function that parses file names?:\n",
    "    - loops over and cuts out slices of data, writes to new files from its band, and the other bands using the `time_offset` calculated\n",
    "    - fail gracefully if the file does not exist, or time_offset is <0, or greater then the duration \n",
    "<br><br>\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f6e490ac-bc4d-4c66-ba28-34995eb863aa",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "id": "248e2108-2c56-402d-8648-df744f1967d4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "basename is CRAB\n",
      "candidate_times_mjd [('/data/frb/2024-07-29/L1_Band/CRAB_L1_Band_2024_07_29_13_37_55.fil', 60520.48467707729)]\n",
      "(['/data/frb/2024-07-29/good/CRAB_L1_Band_2024_07_29_13_37_55_tcand_501.4016380_dm_56.4_snr_6.5.h5'], [('/data/frb/2024-07-29/good', 'CRAB', '501.4016380', '56.4', 'L1_Band', '/data/frb/2024-07-29/L1_Band/CRAB_L1_Band_2024_07_29_13_37_55.fil')], [('/data/frb/2024-07-29/L1_Band/CRAB_L1_Band_2024_07_29_13_37_55.fil', 60520.48467707729)], [6.47], [56.85856689367806])\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "from datetime import datetime\n",
    "\n",
    "import h5py\n",
    "import numpy as np\n",
    "\n",
    "def extract_snr_and_dm_from_hdf5(file_path):\n",
    "    \"\"\"\n",
    "    Extract the Signal-to-Noise Ratio (SNR) and Dispersion Measure (DM) from the root attributes of an HDF5 file.\n",
    "\n",
    "    Parameters:\n",
    "    -----------\n",
    "    file_path : str\n",
    "        The path to the HDF5 file from which to extract the SNR and DM values.\n",
    "\n",
    "    Returns:\n",
    "    --------\n",
    "    snr : float\n",
    "        The Signal-to-Noise Ratio (SNR) value extracted from the root attributes of the HDF5 file.\n",
    "    dm : float\n",
    "        The optimal Dispersion Measure (DM) value extracted from the root attributes of the HDF5 file.\n",
    "\n",
    "    Raises:\n",
    "    -------\n",
    "    KeyError\n",
    "        If the 'snr' or 'dm_opt' attributes are not found in the root attributes of the HDF5 file.\n",
    "    \"\"\"\n",
    "    \n",
    "    # Open the HDF5 file\n",
    "    with h5py.File(file_path, 'r') as hdf:\n",
    "        # Extract and store root attributes\n",
    "        root_attrs_dict = {attr: hdf.attrs[attr] for attr in hdf.attrs.keys()}\n",
    "\n",
    "        snr = root_attrs_dict['snr']\n",
    "        dm = root_attrs_dict['dm_opt']\n",
    "\n",
    "    return snr, dm\n",
    "\n",
    "\n",
    "def parse_h5_filename(file_names):\n",
    "    \"\"\"\n",
    "    Extracts metadata from a list of HDF5 file names.\n",
    "\n",
    "    This function processes each file name in the input list to extract and return the directory, \n",
    "    basename, tcand, dm components, band, and fil_file path.\n",
    "    \n",
    "    Parameters:\n",
    "    file_names (list of str): List of full path to HDF5 file names. Each file name is expected to follow the pattern\n",
    "                              '/data/frb/date/good/basename_tcand_<tcand>_dm_<dm>_snr_<snr>.h5'.\n",
    "    \n",
    "    Returns:\n",
    "    tuple: A tuple containing: file_names, (dir_name, basename, tcand, dm, band, fil_file)\n",
    "           - file_names (list of str): The original list of file names.\n",
    "           - results (list of tuples): A list of tuples where each tuple contains:\n",
    "             - dir_name (str): The directory of the file (empty string if no directory is specified).\n",
    "             - basename (str): The base name of the file up to `_tcand`.\n",
    "             - tcand (str): The tcand value extracted from the file name.\n",
    "             - dm (str): The dm value extracted from the file name.\n",
    "             - band (str): The band value extracted from the file name.\n",
    "             - fil_file (str): The corresponding fil_file path based on the extracted band.\n",
    "    \"\"\"\n",
    "    results = []\n",
    "    for file_name in file_names:\n",
    "        # Extract directory and base file name\n",
    "        dir_name = os.path.dirname(file_name) # the /data/frb/date/good dir\n",
    "        date_dir = os.path.dirname(dir_name) # the /data/frb/date dir\n",
    "        base_file_name = os.path.basename(file_name)\n",
    "        \n",
    "        parts = base_file_name.split('_')\n",
    "        if len(parts) >= 10 and parts[-1].endswith('.h5'):\n",
    "            basename = parts[0]\n",
    "            band = '_'.join(parts[1:3])\n",
    "            fil_start = '_'.join(parts[3:9])\n",
    "            tcand = parts[-5]\n",
    "            dm = parts[-3]\n",
    "\n",
    "            # Construct fil_file path\n",
    "            path_to_fil_file = os.path.join(date_dir, band,  f\"{basename}_{band}_{fil_start}.fil\")\n",
    "            results.append((dir_name, basename, tcand, dm, band, path_to_fil_file))\n",
    "    \n",
    "    return file_names, results\n",
    "\n",
    "def read_fil_metadata(file_path):\n",
    "    \"\"\"\n",
    "    Reads metadata from a .fil file and returns it as a tuple.\n",
    "\n",
    "    # TODO Max Fine, I want to calculate the duration of the .fil file and return it \n",
    "    \n",
    "    Args:\n",
    "    file_path (str): The path to the .fil file.\n",
    "    \n",
    "    Returns:\n",
    "    tuple: A tuple containing (tstart_mjd, basename, fch1, foff, nchans, tsamp,)\n",
    "\n",
    "    fch1 = fil.fch1  # Frequency of the first channel\n",
    "    foff = fil.foff  # Frequency offset between channels\n",
    "    nchans = fil.nchans  # Number of channels\n",
    "    tsamp = fil.tsamp  # sampling interval (seconds)\n",
    "    nbits = fil.nbits # Number of bits the data are recorded in.\n",
    "    tstart_mjd = fil.tstart  # Start time in MJD\n",
    "    \"\"\"\n",
    "    fil = SigprocFile(file_path)\n",
    "    \n",
    "    basename = os.path.basename(file_path)  # Extracting the basename of the file\n",
    "    fch1 = fil.fch1  # Frequency of the first channel\n",
    "    foff = fil.foff  # Frequency offset between channels\n",
    "    nchans = fil.nchans  # Number of channels\n",
    "    tsamp = fil.tsamp  # sampling interval (seconds)\n",
    "    nbits = fil.nbits # Number of bits the data are recorded in.\n",
    "    tstart_mjd = fil.tstart  # Start time in MJD\n",
    "\n",
    "    # Assuming fil.data is a numpy array containing the data, its size divided by nchans gives the number of samples\n",
    "    nsamples = np.shape(fil.get_data) # // nchans\n",
    "    \n",
    "    return (tstart_mjd, basename, fch1, foff, nchans, tsamp, nbits, nsamples)\n",
    "\n",
    "\n",
    "\n",
    "# function to read in fil files duration \n",
    "\n",
    "def find_candidate_time_in_mjd_get_meta(h5_file_names):\n",
    "    \"\"\"\n",
    "    Finds the time of the candidate in MJD using metadata from both .h5 and .fil files.\n",
    "    \n",
    "    Parameters:\n",
    "    h5_file_names (list of str): List of full path to HDF5 file names.\n",
    "    \n",
    "    Returns:\n",
    "    list of tuples: Each tuple contains the file name and the candidate time in MJD.\n",
    "    \"\"\"\n",
    "    _, h5_metadata = parse_h5_filename(h5_file_names)\n",
    "\n",
    "    snr_list = []\n",
    "    dm_list = []\n",
    "    for h5_file in h5_file_names:\n",
    "        snr, dm = extract_snr_and_dm_from_hdf5(h5_file)\n",
    "        snr_list.append(snr)\n",
    "        dm_list.append(dm)\n",
    "    \n",
    "    candidate_times_mjd = []\n",
    "\n",
    "    for metadata in h5_metadata:\n",
    "        \n",
    "        dir_name, basename, tcand, dm, band, fil_file = metadata\n",
    "        print('basename is', basename)\n",
    "        \n",
    "        # Read metadata from the corresponding .fil file\n",
    "        tstart_mjd, fil_basename, fch1, foff, nchans, tsamp, nbits, nsamples = read_fil_metadata(fil_file)\n",
    "        \n",
    "        # Calculate the time of the candidate\n",
    "        tcand = float(tcand)\n",
    "        candidate_time_mjd = tstart_mjd + (tcand * tsamp) / (24 * 3600)  # Convert seconds to days\n",
    "        \n",
    "        candidate_times_mjd.append((fil_file, candidate_time_mjd))\n",
    "\n",
    "    print('candidate_times_mjd', candidate_times_mjd)\n",
    "\n",
    "    \n",
    "    \n",
    "    return h5_file_names, h5_metadata, candidate_times_mjd, snr_list, dm_list\n",
    "\n",
    "# Example usage\n",
    "file_names = [\n",
    "    \"/data/frb/2024-07-29/good/CRAB_L1_Band_2024_07_29_13_37_55_tcand_501.4016380_dm_56.4_snr_6.5.h5\"]\n",
    "\n",
    "print(find_candidate_time_in_mjd_get_meta(file_names))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "29151763-336f-4ff7-bce6-95b035fd7ca1",
   "metadata": {},
   "source": [
    "### Loops part 2\n",
    "\n",
    "* Now we want to write a paralised function\n",
    "    - to loop over full paths to h5 files, (or maybe just the h5 files)\n",
    "    - extract time of candidate in mjd, band name\n",
    "    - try slicing out and saving good candidates, and looping over the other bands\n",
    "\n",
    "* We want a function to constantly (over)write the baseband data\n",
    "    - can we read in a partially written file?\n",
    "    - 10 mins for each band, not at the same exact time as the `.fil` files\n",
    "    - delete / overwrite after 10 min, can we make this rolling? want to always have 10 min, not 0-10 min cylces\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "668b41c2-c8b2-481c-836c-1bf87ba971f2",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import subprocess\n",
    "import h5py\n",
    "import numpy as np\n",
    "import datetime\n",
    "\n",
    "def clean_old_files(ram_data_dir, candidate_times_mjd, retention_seconds=10):\n",
    "    \"\"\"\n",
    "    Clean old files from ram_data_dir that are older than the retention period \n",
    "    based on the list of candidate times in MJD.\n",
    "    \n",
    "    :param ram_data_dir: Directory containing the files to be cleaned.\n",
    "    :param candidate_times_mjd: List of candidate times in MJD.\n",
    "    :param retention_seconds: Retention period in seconds.\n",
    "    \"\"\"\n",
    "    # Convert candidate_times_mjd to datetime objects\n",
    "    candidate_datetimes = [mjd_to_datetime(mjd) for mjd in candidate_times_mjd]\n",
    "    \n",
    "    if not candidate_datetimes:\n",
    "        print(\"No candidate times provided. Skipping file cleanup.\")\n",
    "        return\n",
    "\n",
    "    # Find the oldest candidate time\n",
    "    oldest_candidate_time = min(candidate_datetimes)\n",
    "    \n",
    "    all_files = os.listdir(ram_data_dir)\n",
    "    \n",
    "    for file_name in all_files:\n",
    "        file_path = os.path.join(ram_data_dir, file_name)\n",
    "        if os.path.isfile(file_path):\n",
    "            sample_rate, center_freq, start_time, version = read_baseband_data(ram_data_dir, file_name, return_data=False)\n",
    "            file_start_time = datetime.fromisoformat(start_time)\n",
    "            \n",
    "            # Check if the file is older than the retention period\n",
    "            if (oldest_candidate_time - file_start_time).total_seconds() > retention_seconds:\n",
    "                os.remove(file_path)\n",
    "                print(f\"Removed old file: {file_name}\")\n",
    "\n",
    "\n",
    "def save_baseband_from_h5(h5_file_paths, output_dir, ram_data_dir, delta_t=1, snr_threshold=6):\n",
    "    try:\n",
    "        bands = [\"L1_BAND\", \"L2_BAND\", \"PV_BAND\", \"PH_BAND\"]\n",
    "\n",
    "        h5_file_names, h5_metadata, candidate_times_mjd, snr_list, dm_list = find_candidate_time_in_mjd_get_meta(h5_file_paths)\n",
    "\n",
    "        if not os.path.exists(output_dir):\n",
    "            os.makedirs(output_dir)\n",
    "\n",
    "        for idx, (file_name, metadata, cand_time_mjd, snr, dm) in enumerate(zip(h5_file_names, h5_metadata, candidate_times_mjd, snr_list, dm_list)):\n",
    "            if snr >= snr_threshold:\n",
    "                for band_i in bands:\n",
    "                    dir_name, basename, tcand, dm, band, fil_file = metadata\n",
    "                    file_name = f\"{basename}_{band}_tcand_{tcand}_dm_{dm}_snr_{snr}\"\n",
    "\n",
    "                    if band_i == band:\n",
    "                        out_data_dir = output_dir\n",
    "                        orig_file_name = f\"{basename}_{band}\"\n",
    "                        new_file_name = file_name\n",
    "                        time_candidate = cand_time_mjd\n",
    "\n",
    "                        slice_and_save_baseband_data(ram_data_dir, orig_file_name, \n",
    "                                                      out_data_dir, new_file_name, time_candidate, delta_t=delta_t)\n",
    "                    else:\n",
    "                        sigmf_file1 = f\"{basename}_{band}\"\n",
    "                        sigmf_file2 = f\"{basename}_{band_i}\"\n",
    "                        time_candidate = cand_time_mjd\n",
    "                        orig_file_name = sigmf_file2\n",
    "                        mjd_start2, time_offset = compute_time_offset(sigmf_file1, sigmf_file2, dm, time_candidate)\n",
    "\n",
    "                        new_file_name = f\"{basename}_{band_i}_tcand_{tcand}_dm_{dm}_snr_{snr}\"\n",
    "                        slice_and_save_baseband_data(ram_data_dir, orig_file_name, \n",
    "                                                      out_data_dir, new_file_name, time_candidate, delta_t=delta_t)\n",
    "\n",
    "    except FileNotFoundError as e:\n",
    "        print(f\"File not found. Error: {e}\")\n",
    "    except ValueError as e:\n",
    "        print((f\"Value error. Error: {e}\")\n",
    "    except Exception as e:\n",
    "        print(f\"Failed to save baseband data. Error: {e}\")\n",
    "\n",
    "    clean_old_files(ram_data_dir, candidate_times_mjd)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "1a071d3c-91b7-42bc-becf-575e40a4ec19",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import subprocess\n",
    "import h5py\n",
    "import numpy as np\n",
    "import datetime\n",
    "\n",
    "\n",
    "def save_baseband_from_h5(h5_file_paths, output_dir, ram_data_dir, delta_t=1, snr_threshold=6):\n",
    "    try:\n",
    "        bands = [\"L1_BAND\", \"L2_BAND\", \"PV_BAND\", \"PH_BAND\"]\n",
    "\n",
    "        h5_file_names, h5_metadata, candidate_times_mjd, snr_list, dm_list = find_candidate_time_in_mjd_get_meta(h5_file_paths)\n",
    "\n",
    "        if not os.path.exists(output_dir):\n",
    "            os.makedirs(output_dir)\n",
    "\n",
    "        for idx, (file_name, metadata, cand_time_mjd, snr, dm) in enumerate(zip(h5_file_names, h5_metadata, candidate_times_mjd, snr_list, dm_list)):\n",
    "            \n",
    "            # Only keep baseband data for good candidates with snr >= snr_threshold\n",
    "            if snr >= snr_threshold:\n",
    "\n",
    "                for band_i in bands:\n",
    "                    dir_name, basename, tcand, dm, band, fil_file = metadata\n",
    "                    # Create the file name by combining the basename, band, tcand, and snr\n",
    "                    file_name = f\"{basename}_{band}_tcand_{tcand}_dm_{dm}_snr_{snr}\"\n",
    "\n",
    "                    # Save baseband data for the same band\n",
    "                    if band_i == band:\n",
    "                        out_data_dir = output_dir\n",
    "                        orig_file_name = f\"{basename}_{band}\"\n",
    "                        new_file_name = file_name \n",
    "                        time_candidate = cand_time_mjd\n",
    "                        \n",
    "                        slice_and_save_baseband_data(ram_data_dir, orig_file_name, \n",
    "                                  out_data_dir, new_file_name, time_candidate, delta_t=delta_t)\n",
    "        \n",
    "                    # Save baseband data for the other bands\n",
    "                    else:\n",
    "                        sigmf_file1 = f\"{basename}_{band}\"\n",
    "                        sigmf_file2 = f\"{basename}_{band_i}\" \n",
    "                        time_candidate = cand_time_mjd\n",
    "                        orig_file_name = sigmf_file2\n",
    "                        mjd_start2, time_offset = compute_time_offset(sigmf_file1, sigmf_file2, dm, time_candidate)\n",
    "\n",
    "                        # Write new file \n",
    "                        new_file_name = f\"{basename}_{band_i}_tcand_{tcand}_dm_{dm}_snr_{snr}\"\n",
    "                        slice_and_save_baseband_data(ram_data_dir, orig_file_name, \n",
    "                                  out_data_dir, new_file_name, time_candidate, delta_t=delta_t)\n",
    "    except Exception as e:\n",
    "        print(f\"Failed to save baseband data. Error: {e}\")\n",
    "\n",
    "\n",
    "    # delete old sigmf in ram_data_dir files intelegently \n",
    "    # old is when the oldest time_candidate_mjd is after the end of the sigmf file\n",
    "    # write oldest time - 10s to a file, but check if ours is newer then the time written there -10s before writing\n",
    "    # time_candidate_mjd is in mjd\n",
    "    # sample_rate, center_freq, start_time, version = read_baseband_data(ram_data_dir, orig_file_name, return_data=False)\n",
    "    # here start_time is in iso \n",
    "    \n",
    "    \n",
    "        \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e0ad05f6-3523-454a-b98e-336c72a96480",
   "metadata": {},
   "outputs": [],
   "source": [
    "# I want to record a segment of L1 data, and Ph Data in baseband ~5 min\n",
    "# clear /data_tmp first\n",
    "\n",
    "# after recording can I just pick a bad file from around the time? there should be one maybe\n",
    "# bad = l1\n",
    "\n",
    "# we might need to save them to a dir name, not just a file name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d7655fe8-8efa-4daa-b7cb-ad155a14de48",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "id": "ecd2ad70-35dc-456b-a857-d6f83381e858",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Local start time: 2024-07-30-01-43-39\n",
      "/data_tmp/FRB20240722A_L1_Band\n",
      "Command to be executed: vrt_to_sigmf --file /data_tmp/FRB20240722A_L1_Band --dt-trace --instance 2 --duration 300 --progress\n",
      "/data_tmp/FRB20240722A_PH_Band\n",
      "Command to be executed: vrt_to_sigmf --file /data_tmp/FRB20240722A_PH_Band --dt-trace --instance 0 --duration 300 --progress --address mercurius\n",
      "Output: Press Ctrl + C to stop receiving...\n",
      "Output: Press Ctrl + C to stop receiving...\n",
      "Output: # First frame: 10000 samples, 1722296619 full secs, 0.421500350 frac secs (counter 11)\n",
      "Output: # First frame: 10000 samples, 1722296619 full secs, 0.422800000 frac secs (counter 4)\n",
      "Output: # VRT Context:\n",
      "Output: #    Stream ID (channel): 1 (0)\n",
      "Output: #    Sample Rate [samples per second]: 20000000\n",
      "Output: #    RF Freq [Hz]: 410000000\n",
      "Output: #    Bandwidth [Hz]: 56000000\n",
      "Output: #    Gain [dB]: 30\n",
      "Output: #    Ref lock: external\n",
      "Output: #    Time cal: internal\n",
      "Output: 20.011 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: # VRT Context:\n",
      "Output: #    Stream ID (channel): 1 (0)\n",
      "Output: #    Sample Rate [samples per second]: 100000000\n",
      "Output: #    RF Freq [Hz]: 1250000000\n",
      "Output: #    Bandwidth [Hz]: 80000000\n",
      "Output: #    Gain [dB]: 70\n",
      "Output: #    Ref lock: external\n",
      "Output: #    Time cal: pps\n",
      "Output: #    Cal time: 1722296547\n",
      "Output: 100.027 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9998 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.9856 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9993 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.008 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0019 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.9988 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 100 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0001 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 100.003 Msps, 47% I (9 of 16 bits), 0% I clip,Output: 19.9992 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "\n",
      "Output: 99.9987 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9995 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.9998 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9999 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 100.001 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.9997 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9984 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.002 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 20.0035 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9972 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9989 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.004 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.999 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.997 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0002 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.004 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9992 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 100.004 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9995 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9901 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 100.001 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0004 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.9975 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0014 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 100.004 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9958 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0001 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.004 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9987 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 100.002 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0006 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9992 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9992 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 100.005 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9997 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.9921 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9998 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.9982 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9999 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.002 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0027 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.9998 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9982 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.001 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9999 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9989 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9999 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.9993 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9999 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 100.003 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0013 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9976 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9984 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.001 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9996 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 100.001 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0034 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.9998 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9982 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 100.001 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9996 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.001 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0007 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.9989 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9996 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9983 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0004 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 100.004 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9997 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 19.9999 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9962 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 19.9985 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.001 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0034 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 100.002 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9992 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9936 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 19.9999 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 100.006 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9987 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.9997 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0007 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.002 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9999 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9987 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9986 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9961 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 20.0009 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 100.002 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0001 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.006 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0003 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9955 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 19.9993 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.9977 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0004 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9998 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9998 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.002 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0006 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.9996 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9995 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.9979 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9993 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 100.005 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 20.0009 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9982 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 19.9987 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9997 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 20.0005 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9941 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9997 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.9998 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9999 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.003 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0015 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.004 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9986 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.9975 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9998 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.001 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9994 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 100.001 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0017 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.998 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9995 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.9993 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0006 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.005 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9999 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9986 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 20.0006 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.002 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.999 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9962 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0003 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9997 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0013 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9997 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.999 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9957 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0002 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.005 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9992 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.001 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 19.9998 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.999 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 19.9996 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.002 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0022 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9935 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 19.9972 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.006 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0022 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.002 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9993 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9947 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 19.9996 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9995 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 19.9994 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.001 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 20.0005 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.001 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 20.0007 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9995 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9991 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100 Msps, 49% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9994 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 20.0021 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9981 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 19.9994 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.001 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9997 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.003 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9995 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.004 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.001 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9985 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 20 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9997 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9989 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9997 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 19.9998 Msps, 45% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9942 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 19.9998 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.001 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 20.0013 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.001 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0003 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9994 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9991 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9982 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 20.0002 Msps, 45% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.001 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9989 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.005 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.001 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9976 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9996 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9983 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 19.9998 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9993 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0019 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9981 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 20.0002 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.001 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9999 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.001 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9991 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.9964 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.999 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.004 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0007 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.006 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9994 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9945 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0022 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.002 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9996 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9964 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 19.9998 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.006 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9993 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.9969 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0004 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9964 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9985 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0003 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.9979 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0002 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.002 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 20.0029 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.002 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9997 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.9995 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.998 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9996 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9997 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9992 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0009 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.004 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 19.9987 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9967 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9995 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9996 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0002 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9997 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9993 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 100.002 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0022 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9987 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0006 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 100.001 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9982 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9985 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 20.0009 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9997 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9992 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.999 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.999 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9982 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 20.0029 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.006 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9986 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9984 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 19.9996 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9994 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9994 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.001 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 20.001 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9983 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 20.0001 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 100.004 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9986 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9993 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9996 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9921 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0028 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.005 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0005 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.001 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9984 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.003 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0007 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.001 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 19.9988 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9949 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9999 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9992 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0009 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.003 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 19.9976 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 100.003 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 19.9999 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9998 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0029 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9984 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9995 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.001 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.996 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9998 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.003 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9998 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9987 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9997 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.9967 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9983 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.006 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0035 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9939 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9984 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 100.002 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 100.001 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.001 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9988 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9995 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.999 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9999 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.003 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9995 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9991 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0004 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9992 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 19.9997 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.999 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 20.0004 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.005 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9999 Msps, 48% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.9966 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9998 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 100.005 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 20.0004 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9949 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9989 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9996 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9997 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 100.005 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9998 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9944 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0012 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.002 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9989 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.002 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0025 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9952 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 19.9988 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 100.001 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 20.0003 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.9995 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 19.9999 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.001 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 19.9997 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9985 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9989 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.001 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9996 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.001 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0018 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.005 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9981 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9938 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0019 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9988 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0001 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.001 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.999 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.007 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 19.9996 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9978 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0007 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 100 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9999 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9995 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.001 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9992 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9915 Msps, 51% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9997 Msps, 48% I (9 of 16 bits), 0% I clip,\n",
      "Output: 100.008 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0018 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9934 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.999 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9997 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.001 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9997 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.008 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0007 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9956 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9985 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.9977 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9999 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9988 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9998 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9979 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0027 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.007 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0003 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9955 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9986 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 100.005 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 20.0004 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9972 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9999 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0006 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.998 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9996 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 100.002 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9993 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9986 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9989 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9987 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0024 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.006 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0002 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.999 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9993 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.002 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9997 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9981 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9995 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.998 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9989 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9994 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 19.9999 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.996 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9996 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.003 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0028 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9991 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.999 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 100.003 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0003 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.9963 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 20.0008 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9986 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9982 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 100.004 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9997 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9982 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0006 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.002 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.9992 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9986 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.004 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9969 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9999 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 100.003 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9997 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9959 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9999 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.001 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9997 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.002 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0002 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.9977 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0015 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.9974 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.999 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 100.001 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 20.0013 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.003 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9985 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.9995 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9993 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.9985 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.001 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 100.003 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9994 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.9982 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9991 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.9991 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0026 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 100.003 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9994 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.9957 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9992 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.006 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0005 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.9952 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9991 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.008 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0007 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9942 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9997 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.9983 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9994 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.003 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9998 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.995 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0022 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 100.005 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9998 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 100.001 Msps, 48% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0002 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.001 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9982 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9958 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0006 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9989 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.999 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 100.003 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9994 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9997 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9997 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9991 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0035 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.9999 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9994 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.003 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9993 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9957 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9996 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9996 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9996 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 100.006 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0011 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.9951 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9993 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9989 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9998 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9973 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9997 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.01 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9996 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.9931 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.001 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9985 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0006 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 100.007 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9993 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9948 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9997 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9978 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9994 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 100.007 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.9983 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9991 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.9985 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0018 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9969 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9998 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9997 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0002 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9998 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 100.001 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9995 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 100.006 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9996 Msps, 47% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.996 Msps, 48% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.9972 Msps, 48% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9998 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 100.005 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9999 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.9989 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0022 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 100.004 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9993 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 99.9998 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9998 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 99.9906 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 20.0005 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Output: 100.002 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9988 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 100 Msps, 47% I (9 of 16 bits), 0% I clip,\n",
      "Output: 19.9995 Msps, 46% I (8 of 16 bits), 0% I clip,\n",
      "Return Code: 0\n",
      "Task completed with result: None\n",
      "Return Code: 0\n",
      "Task completed with result: None\n"
     ]
    }
   ],
   "source": [
    "import subprocess\n",
    "from datetime import datetime\n",
    "from concurrent.futures import ThreadPoolExecutor, as_completed\n",
    "\n",
    "# instance 0 is 70 = pband, same for PH\n",
    "# instance 2 is l band, only able to record L1 because of zmq split\n",
    "\n",
    "\n",
    "# save PH_B, and L1\n",
    "# Define file names and instances\n",
    "band1 = 'L1_Band'\n",
    "band2 = 'PH_Band'\n",
    "basename = 'FRB20240722A'\n",
    "file_name1 = f\"{basename}_{band1}\"\n",
    "file_name2 = f\"{basename}_{band2}\"\n",
    "\n",
    "l1_instance = '2'\n",
    "ph_instance = '0'\n",
    "ph_address = 'mercurius'\n",
    "l1_address = None  # As l1_address is None, it will be handled accordingly\n",
    "\n",
    "duration = 60 * 5 # 5 minutes \n",
    "\n",
    "# print local start time in yyy-mm-dd-hh-mm-ss\n",
    "# Print local start time in yyyy-mm-dd-hh-mm-ss\n",
    "start_time = datetime.now().strftime('%Y-%m-%d-%H-%M-%S')\n",
    "print(f\"Local start time: {start_time}\")\n",
    "\n",
    "\n",
    "# run run_vrt_to_sigmf for each band using a subprocess call to open nammed screens\n",
    "                     \n",
    "\n",
    "def run_concurrent():\n",
    "    # Define parameters for the two concurrent runs\n",
    "    params1 = {\n",
    "        'file_name': file_name1,\n",
    "        'instance': l1_instance,\n",
    "        'duration': duration,\n",
    "        'ram_data_dir': '/data_tmp',\n",
    "        'address': l1_address\n",
    "    }\n",
    "\n",
    "    params2 = {\n",
    "        'file_name': file_name2,\n",
    "        'instance': ph_instance,\n",
    "        'duration': duration,\n",
    "        'ram_data_dir': '/data_tmp',\n",
    "        'address': ph_address\n",
    "    }\n",
    "\n",
    "    # Create a ThreadPoolExecutor\n",
    "    with ThreadPoolExecutor(max_workers=2) as executor:\n",
    "        # Submit the tasks to the executor\n",
    "        future1 = executor.submit(run_vrt_to_sigmf, **params1)\n",
    "        future2 = executor.submit(run_vrt_to_sigmf, **params2)\n",
    "        \n",
    "        # Wait for all futures to complete\n",
    "        for future in as_completed([future1, future2]):\n",
    "            try:\n",
    "                result = future.result()\n",
    "                print(f\"Task completed with result: {result}\")\n",
    "            except Exception as e:\n",
    "                print(f\"An exception occurred: {e}\")\n",
    "\n",
    "# Run the concurrent tasks\n",
    "run_concurrent()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "83928295-38c6-4c24-9365-77ae82c50b63",
   "metadata": {},
   "outputs": [],
   "source": [
    "# local start time 2024-07-30-01-43-39\n",
    "\n",
    "# Example usage of the save_baseband_from_h5 function\n",
    "h5_file_paths = [\"path/to/h5file1.h5\", \"path/to/h5file2.h5\"]\n",
    "output_dir = \"/data_tmp\"\n",
    "ram_data_dir = ram_data_dir\n",
    "\n",
    "# Call the function\n",
    "save_baseband_from_h5(h5_file_paths, output_dir, ram_data_dir, delta_t=2, snr_threshold=6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aff78386-2c15-42e1-95a9-a11cf1f9d485",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3f56ad96-4462-4d14-8b08-9afa4e01719f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "db440c79-2a68-4398-9d9d-f150f1e37260",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "69719313-6e08-4a35-a975-2aa8904e4af7",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "87ea40c6-1178-4381-a4c2-95499970841b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "43305715-12d1-4543-b8d2-a9bd3dcb47dd",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a9e92770-3b81-4307-b0d4-6f7bade0f9c9",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "caf5aab5-ea52-46b0-8233-2dd4377e3d35",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
